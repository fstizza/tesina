from unidecode import unidecode

from modelos import Solucion


def obtener_soluciones(filtro_soluciones: str) -> list[Solucion]:
    soluciones = [
        ### CONTROL
        Solucion(
            nombre="at",
            lenguaje="JavaScript",
            adaptador="at",
            directorio="control/at",
        ),
        Solucion(
            nombre="at2",
            lenguaje="Python",
            adaptador="at2",
            directorio="control/at2",
            no_usa_fecha=False,
            no_usa_sueldo=True,
            no_usa_tipo_operacion=True,
        ),
        Solucion(
            nombre="bm2",
            lenguaje="Python",
            adaptador="bm2",
            directorio="control/bm2",
            require_argumento_saldo=True,
        ),
        Solucion(
            nombre="bf",
            lenguaje="Python",
            adaptador="bf",
            directorio="control/bf",
            require_argumento_saldo=True,
        ),
        Solucion(
            nombre="cd",
            lenguaje="C#",
            adaptador="cd",
            directorio="control/cd/Cajero",
            nombre_proyecto_net="Cajero.csproj",
            require_argumento_saldo=True,
        ),
        Solucion(
            nombre="dl",
            lenguaje="Python",
            adaptador="dl",
            directorio="control/dl",
            require_argumento_saldo=True,
        ),
        Solucion(
            nombre="le",
            lenguaje="Python",
            adaptador="le",
            directorio="control/le",
        ),
        Solucion(
            nombre="lm",
            lenguaje="Python",
            adaptador="lm",
            directorio="control/lm",
            require_argumento_saldo=True,
        ),
        Solucion(
            nombre="ms",
            lenguaje="Python",
            adaptador="ms",
            directorio="control/ms",
            require_argumento_saldo=True,
        ),
        Solucion(
            nombre="nm",
            lenguaje="JavaScript",
            adaptador="nm",
            directorio="control/nm",
            require_argumento_saldo=True,
        ),
        Solucion(
            nombre="pg",
            lenguaje="JavaScript",
            adaptador="pg",
            directorio="control/pg",
            require_argumento_saldo=True,
        ),
        Solucion(
            nombre="pm",
            lenguaje="Python",
            adaptador="pm",
            directorio="control/pm",
            no_usa_fecha=True,
        ),
        Solucion(
            nombre="vl",
            lenguaje="JavaScript",
            adaptador="vl",
            directorio="control/vl",
            require_argumento_saldo=True,
        ),
        Solucion(
            nombre="ws",
            lenguaje="C#",
            adaptador="ws",
            directorio="control/ws",
        ),
        ### EXPERIMENTO
        Solucion(
            nombre="bm",
            lenguaje="JavaScript",
            adaptador="bm",
            directorio="experimento/bm",
        ),
        Solucion(
            nombre="bv",
            lenguaje="Python",
            adaptador="bv",
            directorio="experimento/bv",
        ),
        Solucion(
            nombre="dp",
            lenguaje="JavaScript",
            adaptador="dp",
            directorio="experimento/dp",
        ),
        Solucion(
            nombre="df",
            lenguaje="Python",
            adaptador="df",
            directorio="experimento/df",
        ),
        Solucion(
            nombre="fe",
            lenguaje="C#",
            adaptador="fe",
            directorio="experimento/fe",
            require_argumento_saldo=True,
        ),
        Solucion(
            nombre="fl",
            lenguaje="JavaScript",
            adaptador="fl",
            directorio="experimento/fl",
        ),
        Solucion(
            nombre="gt",
            lenguaje="C#",
            adaptador="gt",
            directorio="experimento/gt",
        ),
        Solucion(
            nombre="gf",
            lenguaje="Python",
            adaptador="gf",
            directorio="experimento/gf",
        ),
        Solucion(
            nombre="ij",
            lenguaje="C#",
            adaptador="ij",
            directorio="experimento/ij",
        ),
        Solucion(
            nombre="mj",
            lenguaje="Python",
            adaptador="mj",
            directorio="experimento/mj",
        ),
        Solucion(
            nombre="nn",
            lenguaje="Python",
            adaptador="nn",
            directorio="experimento/nn",
        ),
        Solucion(
            nombre="nd",
            lenguaje="JavaScript",
            adaptador="nd",
            directorio="experimento/nd",
        ),
        Solucion(
            nombre="wg",
            lenguaje="Python",
            adaptador="wg",
            directorio="experimento/wg",
            require_argumento_saldo=True,
        ),
        Solucion(
            nombre="sa",
            lenguaje="C#",
            adaptador="sa",
            directorio="experimento/sa",
        ),
    ]
    if filtro_soluciones is not None and len(filtro_soluciones) != 0:
        soluciones = list(
            filter(
                lambda s: unidecode(s.nombre)
                .upper()
                .startswith(filtro_soluciones.upper()),
                soluciones,
            )
        )
    return soluciones
